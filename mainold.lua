--------------------------------------------------------------------------
  -- local function zipListener(event)
  --   if not event.isError then
  --     --
  --   end
  -- end
  --
  -- local zipOptions = {
  --   zipFile = 'modules.zip',
  --   zipBaseDir = system.DocumentsDirectory,
  --   dstBaseDir = system.DocumentsDirectory,
  --   files = {'modules'},
  --   listener = zipListener
  -- }
  --
  -- zip.uncompress( zipOptions )
  -- local path = system.pathForFile('build.sh', system.DocumentsDirectory)
  -- local file = io.open(path, 'w')
  --
  -- file:write([[#!/system/bin/sh
  -- HOME=/sdcard
  -- cd "${HOME}"
  --
  -- # JAVA_HOME=${HOME}/Windows/jdk
  -- ANDROID_HOME=${HOME}/Builder/sdk
  --
  -- AAPT=${ANDROID_HOME}/build-tools/30.0.1/aapt
  -- # ZIPALIGN=${ANDROID_HOME}/build-tools/30.0.1/zipalign
  -- # APKSIGNER=${ANDROID_HOME}/build-tools/30.0.1/apksigner
  -- # JAVA=${JAVA_HOME}/bin/java
  -- # KEYTOOL=${JAVA_HOME}/bin/keytool
  -- # XML_AXML=${ANDROID_HOME}/xml-axml.jar
  --
  -- # "${JAVA}" -jar "${XML_AXML}" e ${HOME}/AndroidManifest-orig.xml ${HOME}/AndroidManifest.xml
  -- "${AAPT}" remove "${HOME}/Builder/Construct Code.apk" AndroidManifest.xml
  -- # "${AAPT}" add "Construct Code.apk" AndroidManifest.xml
  --
  -- # "${ZIPALIGN}" -f 4 "Construct Code.apk" "Construct Code.signed.apk"
  -- # "${KEYTOOL}" -genkeypair -keystore testkey.jks -dname "CN=ConstructCode, OU=constructcode, O=constructcodebyleo, L=Unknown, ST=Unknown, C=EN" -storepass testkey -alias testkey -keypass testkey -keyalg RSA -keysize 2048 -validity 10000
  -- # "${APKSIGNER}" sign --ks ${HOME}/testkey.jks --ks-key-alias testkey --ks-pass pass:testkey "${HOME}/Construct Code.signed.apk"
  --
  -- # rm "${HOME}/testkey.jks"
  -- # rm "${HOME}/AndroidManifest.xml"
  -- # rm "${HOME}/Construct Code.signed.apk.idsig"
  -- ]])
  --
  -- io.close(file)
  --
  -- if system.getInfo 'environment' ~= 'simulator' then
  --   os.execute('/system/bin/sh "' .. system.pathForFile('build.sh', system.DocumentsDirectory) .. '"')
  -- end
  -- os.execute([[#!/bin/sh
  --
  -- HOME="C:/Apk Builder"
  -- cd "${HOME}"
  --
  -- JAVA_HOME="${HOME}/jdk"
  -- ANDROID_HOME="${HOME}/sdk"
  --
  -- AAPT="${ANDROID_HOME}/build-tools/30.0.1/aapt"
  -- ANDROID_JAR="${ANDROID_HOME}/platforms/android-30/android.jar"
  --
  -- "${AAPT}" list "Construct Code.apk"
  -- # "${AAPT}" remove "Construct Code.apk" AndroidManifest.xml
  -- # "${AAPT}" add "Construct Code.apk" AndroidManifest.xml
  --
  -- sleep 5m]])
--------------------------------------------------------------------------

-- local path = system.pathForFile('Block/CGame', system.ResourceDirectory)
-- local file = io.open(path, 'r')
-- if file then
--   local data = file:read('*a')
--   io.close(file)
--   if data == 'main' then
--     composer.gotoScene "Module.menu"
--   else
--     local toPath = system.pathForFile('CGame', system.DocumentsDirectory)
--     os.execute('cp "' .. path .. '" "' .. toPath .. '"')
--
--     local function zipListener(event)
--       if not event.isError then
--         if event.type == 'uncompress' then
--           os.remove(system.pathForFile('CGame', system.DocumentsDirectory))
--           local path = system.pathForFile('Block/CGame', system.ResourceDirectory)
--           local file = io.open(path, 'w')
--           if file then
--             file:write('main')
--             io.close(file)
--           end
--           composer.gotoScene "Module.menu"
--         end
--       end
--     end
--
--     local zipOptions = {
--       zipFile = 'CGame',
--       zipBaseDir = system.DocumentsDirectory,
--       dstBaseDir = system.DocumentsDirectory,
--       files = {"CGame.apk"},
--       listener = zipListener
--     }
--     zip.uncompress( zipOptions )
--   end
-- end
